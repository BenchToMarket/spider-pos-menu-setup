// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:2.0.50727.1433
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Diagnostics;
using System.IO;




/// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[Serializable()]
[System.ComponentModel.DesignerCategory("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
[System.Xml.Serialization.XmlRoot("DataSet1")]
[System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
public partial class DataSet1 : System.Data.DataSet
{

    private FoodsDataTable tableFoods;

    private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode()]
    public DataSet1() : base()
    {
        BeginInit();
        InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        EndInit();
    }

    [DebuggerNonUserCode()]
    protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
    {
        if (IsBinarySerialized(info, context) == true)
        {
            InitVars(false);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
            Tables.CollectionChanged += schemaChangedHandler1;
            Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
        if (DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)
        {
            var ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new StringReader(strSchema)));
            if (ds.Tables["Foods"] is not null)
            {
                base.Tables.Add(new FoodsDataTable(ds.Tables["Foods"]));
            }
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, System.Data.MissingSchemaAction.Add);
            InitVars();
        }
        else
        {
            ReadXmlSchema(new System.Xml.XmlTextReader(new StringReader(strSchema)));
        }
        GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
        base.Tables.CollectionChanged += schemaChangedHandler;
        Relations.CollectionChanged += schemaChangedHandler;
    }

    [DebuggerNonUserCode()]
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public FoodsDataTable Foods
    {
        get
        {
            return tableFoods;
        }
    }

    [DebuggerNonUserCode()]
    [System.ComponentModel.Browsable(true)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override System.Data.SchemaSerializationMode SchemaSerializationMode
    {
        get
        {
            return _schemaSerializationMode;
        }
        set
        {
            _schemaSerializationMode = value;
        }
    }

    [DebuggerNonUserCode()]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataTableCollection Tables
    {
        get
        {
            return base.Tables;
        }
    }

    [DebuggerNonUserCode()]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataRelationCollection Relations
    {
        get
        {
            return base.Relations;
        }
    }

    [DebuggerNonUserCode()]
    protected override void InitializeDerivedDataSet()
    {
        BeginInit();
        InitClass();
        EndInit();
    }

    [DebuggerNonUserCode()]
    public override System.Data.DataSet Clone()
    {
        DataSet1 cln = (DataSet1)base.Clone();
        cln.InitVars();
        cln.SchemaSerializationMode = SchemaSerializationMode;
        return cln;
    }

    [DebuggerNonUserCode()]
    protected override bool ShouldSerializeTables()
    {
        return false;
    }

    [DebuggerNonUserCode()]
    protected override bool ShouldSerializeRelations()
    {
        return false;
    }

    [DebuggerNonUserCode()]
    protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
    {
        if (DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)
        {
            Reset();
            var ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if (ds.Tables["Foods"] is not null)
            {
                base.Tables.Add(new FoodsDataTable(ds.Tables["Foods"]));
            }
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, System.Data.MissingSchemaAction.Add);
            InitVars();
        }
        else
        {
            ReadXml(reader);
            InitVars();
        }
    }

    [DebuggerNonUserCode()]
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
    {
        var stream = new MemoryStream();
        WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0L;
        return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }

    [DebuggerNonUserCode()]
    internal void InitVars()
    {
        InitVars(true);
    }

    [DebuggerNonUserCode()]
    internal void InitVars(bool initTable)
    {
        tableFoods = (FoodsDataTable)base.Tables["Foods"];
        if (initTable == true)
        {
            if (tableFoods is not null)
            {
                tableFoods.InitVars();
            }
        }
    }

    [DebuggerNonUserCode()]
    private void InitClass()
    {
        DataSetName = "DataSet1";
        Prefix = "";
        Namespace = "http://www.tempuri.org/DataSet1.xsd";
        EnforceConstraints = true;
        SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        tableFoods = new FoodsDataTable();
        base.Tables.Add(tableFoods);
    }

    [DebuggerNonUserCode()]
    private bool ShouldSerializeFoods()
    {
        return false;
    }

    [DebuggerNonUserCode()]
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
    {
        if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
        {
            InitVars();
        }
    }

    [DebuggerNonUserCode()]
    public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
    {
        var ds = new DataSet1();
        var type = new System.Xml.Schema.XmlSchemaComplexType();
        var sequence = new System.Xml.Schema.XmlSchemaSequence();
        var any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        var dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace))
        {
            var s1 = new MemoryStream();
            var s2 = new MemoryStream();
            try
            {
                System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                while (schemas.MoveNext())
                {
                    schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                    s2.SetLength(0L);
                    schema.Write(s2);
                    if (s1.Length == s2.Length)
                    {
                        s1.Position = 0L;
                        s2.Position = 0L;

                        while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                        {


                        }
                        if (s1.Position == s1.Length)
                        {
                            return type;
                        }
                    }

                }
            }
            finally
            {
                if (s1 is not null)
                {
                    s1.Close();
                }
                if (s2 is not null)
                {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }

    public delegate void FoodsRowChangeEventHandler(object sender, FoodsRowChangeEvent e);

    /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
    public partial class FoodsDataTable : System.Data.DataTable, IEnumerable
    {

        private System.Data.DataColumn columnFoodID;

        private System.Data.DataColumn columnFoodName;

        private System.Data.DataColumn columnAbrevFoodName;

        private System.Data.DataColumn columnChitFoodName;

        private System.Data.DataColumn columnCategoryID;

        private System.Data.DataColumn columnFoodCost;

        private System.Data.DataColumn columnRoutingName;

        private System.Data.DataColumn columnTax;

        private System.Data.DataColumn columnSurcharge;

        private System.Data.DataColumn columnPrintPriorityName;

        private System.Data.DataColumn columnActive;

        [DebuggerNonUserCode()]
        public FoodsDataTable() : base()
        {
            TableName = "Foods";
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        internal FoodsDataTable(System.Data.DataTable table) : base()
        {
            TableName = table.TableName;
            if (table.CaseSensitive != table.DataSet.CaseSensitive)
            {
                CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
            {
                Locale = table.Locale;
            }
            if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
            {
                Namespace = table.Namespace;
            }
            Prefix = table.Prefix;
            MinimumCapacity = table.MinimumCapacity;
        }

        [DebuggerNonUserCode()]
        protected FoodsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            InitVars();
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn FoodIDColumn
        {
            get
            {
                return columnFoodID;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn FoodNameColumn
        {
            get
            {
                return columnFoodName;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn AbrevFoodNameColumn
        {
            get
            {
                return columnAbrevFoodName;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn ChitFoodNameColumn
        {
            get
            {
                return columnChitFoodName;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn CategoryIDColumn
        {
            get
            {
                return columnCategoryID;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn FoodCostColumn
        {
            get
            {
                return columnFoodCost;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn RoutingNameColumn
        {
            get
            {
                return columnRoutingName;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn TaxColumn
        {
            get
            {
                return columnTax;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn SurchargeColumn
        {
            get
            {
                return columnSurcharge;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn PrintPriorityNameColumn
        {
            get
            {
                return columnPrintPriorityName;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataColumn ActiveColumn
        {
            get
            {
                return columnActive;
            }
        }

        [DebuggerNonUserCode()]
        [System.ComponentModel.Browsable(false)]
        public int Count
        {
            get
            {
                return Rows.Count;
            }
        }

        [DebuggerNonUserCode()]
        public FoodsRow this[int index]
        {
            get
            {
                return (FoodsRow)Rows[index];
            }
        }

        public event FoodsRowChangeEventHandler FoodsRowChanging;

        public event FoodsRowChangeEventHandler FoodsRowChanged;

        public event FoodsRowChangeEventHandler FoodsRowDeleting;

        public event FoodsRowChangeEventHandler FoodsRowDeleted;

        [DebuggerNonUserCode()]
        public void AddFoodsRow(FoodsRow row)
        {
            Rows.Add(row);
        }

        [DebuggerNonUserCode()]
        public FoodsRow AddFoodsRow(string FoodName, string AbrevFoodName, string ChitFoodName, int CategoryID, decimal FoodCost, string RoutingName, string Tax, decimal Surcharge, string PrintPriorityName, bool Active)
        {
            FoodsRow rowFoodsRow = (FoodsRow)NewRow();
            object[] columnValuesArray = new object[] { null, FoodName, AbrevFoodName, ChitFoodName, CategoryID, FoodCost, RoutingName, Tax, Surcharge, PrintPriorityName, Active };
            rowFoodsRow.ItemArray = columnValuesArray;
            Rows.Add(rowFoodsRow);
            return rowFoodsRow;
        }

        [DebuggerNonUserCode()]
        public FoodsRow FindByFoodID(int FoodID)
        {
            return (FoodsRow)Rows.Find(new object[] { FoodID });
        }

        [DebuggerNonUserCode()]
        public virtual IEnumerator GetEnumerator()
        {
            return Rows.GetEnumerator();
        }

        [DebuggerNonUserCode()]
        public override System.Data.DataTable Clone()
        {
            FoodsDataTable cln = (FoodsDataTable)base.Clone();
            cln.InitVars();
            return cln;
        }

        [DebuggerNonUserCode()]
        protected override System.Data.DataTable CreateInstance()
        {
            return new FoodsDataTable();
        }

        [DebuggerNonUserCode()]
        internal void InitVars()
        {
            columnFoodID = Columns["FoodID"];
            columnFoodName = Columns["FoodName"];
            columnAbrevFoodName = Columns["AbrevFoodName"];
            columnChitFoodName = Columns["ChitFoodName"];
            columnCategoryID = Columns["CategoryID"];
            columnFoodCost = Columns["FoodCost"];
            columnRoutingName = Columns["RoutingName"];
            columnTax = Columns["Tax"];
            columnSurcharge = Columns["Surcharge"];
            columnPrintPriorityName = Columns["PrintPriorityName"];
            columnActive = Columns["Active"];
        }

        [DebuggerNonUserCode()]
        private void InitClass()
        {
            columnFoodID = new System.Data.DataColumn("FoodID", typeof(int), null, System.Data.MappingType.Element);
            Columns.Add(columnFoodID);
            columnFoodName = new System.Data.DataColumn("FoodName", typeof(string), null, System.Data.MappingType.Element);
            Columns.Add(columnFoodName);
            columnAbrevFoodName = new System.Data.DataColumn("AbrevFoodName", typeof(string), null, System.Data.MappingType.Element);
            Columns.Add(columnAbrevFoodName);
            columnChitFoodName = new System.Data.DataColumn("ChitFoodName", typeof(string), null, System.Data.MappingType.Element);
            Columns.Add(columnChitFoodName);
            columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
            Columns.Add(columnCategoryID);
            columnFoodCost = new System.Data.DataColumn("FoodCost", typeof(decimal), null, System.Data.MappingType.Element);
            Columns.Add(columnFoodCost);
            columnRoutingName = new System.Data.DataColumn("RoutingName", typeof(string), null, System.Data.MappingType.Element);
            Columns.Add(columnRoutingName);
            columnTax = new System.Data.DataColumn("Tax", typeof(string), null, System.Data.MappingType.Element);
            Columns.Add(columnTax);
            columnSurcharge = new System.Data.DataColumn("Surcharge", typeof(decimal), null, System.Data.MappingType.Element);
            Columns.Add(columnSurcharge);
            columnPrintPriorityName = new System.Data.DataColumn("PrintPriorityName", typeof(string), null, System.Data.MappingType.Element);
            Columns.Add(columnPrintPriorityName);
            columnActive = new System.Data.DataColumn("Active", typeof(bool), null, System.Data.MappingType.Element);
            Columns.Add(columnActive);
            Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] { columnFoodID }, true));
            columnFoodID.AutoIncrement = true;
            columnFoodID.AllowDBNull = false;
            columnFoodID.ReadOnly = true;
            columnFoodID.Unique = true;
            columnFoodName.AllowDBNull = false;
            columnCategoryID.AllowDBNull = false;
        }

        [DebuggerNonUserCode()]
        public FoodsRow NewFoodsRow()
        {
            return (FoodsRow)NewRow();
        }

        [DebuggerNonUserCode()]
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new FoodsRow(builder);
        }

        [DebuggerNonUserCode()]
        protected override Type GetRowType()
        {
            return typeof(FoodsRow);
        }

        [DebuggerNonUserCode()]
        protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowChanged(e);
            if (FoodsRowChanged is not null)
            {
                FoodsRowChanged?.Invoke(this, new FoodsRowChangeEvent((FoodsRow)e.Row, e.Action));
            }
        }

        [DebuggerNonUserCode()]
        protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowChanging(e);
            if (FoodsRowChanging is not null)
            {
                FoodsRowChanging?.Invoke(this, new FoodsRowChangeEvent((FoodsRow)e.Row, e.Action));
            }
        }

        [DebuggerNonUserCode()]
        protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowDeleted(e);
            if (FoodsRowDeleted is not null)
            {
                FoodsRowDeleted?.Invoke(this, new FoodsRowChangeEvent((FoodsRow)e.Row, e.Action));
            }
        }

        [DebuggerNonUserCode()]
        protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowDeleting(e);
            if (FoodsRowDeleting is not null)
            {
                FoodsRowDeleting?.Invoke(this, new FoodsRowChangeEvent((FoodsRow)e.Row, e.Action));
            }
        }

        [DebuggerNonUserCode()]
        public void RemoveFoodsRow(FoodsRow row)
        {
            Rows.Remove(row);
        }

        [DebuggerNonUserCode()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var ds = new DataSet1();
            var any1 = new System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            var any2 = new System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "FoodsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new MemoryStream();
                var s2 = new MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;

                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {


                            }
                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }

    /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class FoodsRow : System.Data.DataRow
    {

        private FoodsDataTable tableFoods;

        [DebuggerNonUserCode()]
        internal FoodsRow(System.Data.DataRowBuilder rb) : base(rb)
        {
            tableFoods = (FoodsDataTable)Table;
        }

        [DebuggerNonUserCode()]
        public int FoodID
        {
            get
            {
                return Conversions.ToInteger(this[tableFoods.FoodIDColumn]);
            }
            set
            {
                this[tableFoods.FoodIDColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public string FoodName
        {
            get
            {
                return Conversions.ToString(this[tableFoods.FoodNameColumn]);
            }
            set
            {
                this[tableFoods.FoodNameColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public string AbrevFoodName
        {
            get
            {
                try
                {
                    return Conversions.ToString(this[tableFoods.AbrevFoodNameColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'AbrevFoodName' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.AbrevFoodNameColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public string ChitFoodName
        {
            get
            {
                try
                {
                    return Conversions.ToString(this[tableFoods.ChitFoodNameColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'ChitFoodName' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.ChitFoodNameColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public int CategoryID
        {
            get
            {
                return Conversions.ToInteger(this[tableFoods.CategoryIDColumn]);
            }
            set
            {
                this[tableFoods.CategoryIDColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public decimal FoodCost
        {
            get
            {
                try
                {
                    return Conversions.ToDecimal(this[tableFoods.FoodCostColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'FoodCost' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.FoodCostColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public string RoutingName
        {
            get
            {
                try
                {
                    return Conversions.ToString(this[tableFoods.RoutingNameColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'RoutingName' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.RoutingNameColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public string Tax
        {
            get
            {
                try
                {
                    return Conversions.ToString(this[tableFoods.TaxColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'Tax' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.TaxColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public decimal Surcharge
        {
            get
            {
                try
                {
                    return Conversions.ToDecimal(this[tableFoods.SurchargeColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'Surcharge' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.SurchargeColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public string PrintPriorityName
        {
            get
            {
                try
                {
                    return Conversions.ToString(this[tableFoods.PrintPriorityNameColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'PrintPriorityName' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.PrintPriorityNameColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public bool Active
        {
            get
            {
                try
                {
                    return Conversions.ToBoolean(this[tableFoods.ActiveColumn]);
                }
                catch (InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column 'Active' in table 'Foods' is DBNull.", e);
                }
            }
            set
            {
                this[tableFoods.ActiveColumn] = value;
            }
        }

        [DebuggerNonUserCode()]
        public bool IsAbrevFoodNameNull()
        {
            return IsNull(tableFoods.AbrevFoodNameColumn);
        }

        [DebuggerNonUserCode()]
        public void SetAbrevFoodNameNull()
        {
            this[tableFoods.AbrevFoodNameColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsChitFoodNameNull()
        {
            return IsNull(tableFoods.ChitFoodNameColumn);
        }

        [DebuggerNonUserCode()]
        public void SetChitFoodNameNull()
        {
            this[tableFoods.ChitFoodNameColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsFoodCostNull()
        {
            return IsNull(tableFoods.FoodCostColumn);
        }

        [DebuggerNonUserCode()]
        public void SetFoodCostNull()
        {
            this[tableFoods.FoodCostColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsRoutingNameNull()
        {
            return IsNull(tableFoods.RoutingNameColumn);
        }

        [DebuggerNonUserCode()]
        public void SetRoutingNameNull()
        {
            this[tableFoods.RoutingNameColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsTaxNull()
        {
            return IsNull(tableFoods.TaxColumn);
        }

        [DebuggerNonUserCode()]
        public void SetTaxNull()
        {
            this[tableFoods.TaxColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsSurchargeNull()
        {
            return IsNull(tableFoods.SurchargeColumn);
        }

        [DebuggerNonUserCode()]
        public void SetSurchargeNull()
        {
            this[tableFoods.SurchargeColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsPrintPriorityNameNull()
        {
            return IsNull(tableFoods.PrintPriorityNameColumn);
        }

        [DebuggerNonUserCode()]
        public void SetPrintPriorityNameNull()
        {
            this[tableFoods.PrintPriorityNameColumn] = Convert.DBNull;
        }

        [DebuggerNonUserCode()]
        public bool IsActiveNull()
        {
            return IsNull(tableFoods.ActiveColumn);
        }

        [DebuggerNonUserCode()]
        public void SetActiveNull()
        {
            this[tableFoods.ActiveColumn] = Convert.DBNull;
        }
    }

    /// <summary>
    /// Row event argument class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class FoodsRowChangeEvent : EventArgs
    {

        private FoodsRow eventRow;

        private System.Data.DataRowAction eventAction;

        [DebuggerNonUserCode()]
        public FoodsRowChangeEvent(FoodsRow row, System.Data.DataRowAction action) : base()
        {
            eventRow = row;
            eventAction = action;
        }

        [DebuggerNonUserCode()]
        public FoodsRow Row
        {
            get
            {
                return eventRow;
            }
        }

        [DebuggerNonUserCode()]
        public System.Data.DataRowAction Action
        {
            get
            {
                return eventAction;
            }
        }
    }
}